import{S as L,i as p}from"./assets/vendor-DUWRWV1p.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))i(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const c of r.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&i(c)}).observe(document,{childList:!0,subtree:!0});function o(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(t){if(t.ep)return;t.ep=!0;const r=o(t);fetch(t.href,r)}})();function m(e){const n=document.querySelector(".gallery");if(!n){console.error("Gallery element not found.");return}if(!e||e.length===0){n.innerHTML='<p class="no-results">No images to display.</p>';return}const o=e.map(({webformatURL:t,largeImageURL:r,tags:c,likes:b,views:w,comments:S,downloads:v})=>`
        <div class="photo-card">
          <a href="${r}" class="gallery-link">
            <img src="${t}" alt="${c}" loading="lazy" class="gallery-image" />
          </a>
          <div class="info">
            <p><b>Likes:</b> ${b}</p>
            <p><b>Views:</b> ${w}</p>
            <p><b>Comments:</b> ${S}</p>
            <p><b>Downloads:</b> ${v}</p>
          </div>
        </div>
      `).join("");n.innerHTML+=o,new L(".gallery a").refresh()}const $="47523471-f6b5bf2e20bc9d436dc6d8dc4",q="https://pixabay.com/api/";async function y(e,n=1,o=12){const i=`${q}?key=${$}&q=${encodeURIComponent(e)}&image_type=photo&orientation=horizontal&safesearch=true&page=${n}&per_page=${o}`;try{const t=await fetch(i);if(!t.ok)throw new Error(`HTTP error! Status: ${t.status}`);const r=await t.json();if(!r.hits||!r.totalHits)throw new Error("Invalid response format from API.");return r}catch(t){throw console.error("Error fetching images:",t),t}}const E=document.querySelector(".search-form"),P=document.querySelector('input[name="searchQuery"]'),g=document.querySelector(".gallery"),I=document.querySelector(".loader");let s=1,u="";const f=12;let a=null;E.addEventListener("submit",O);async function O(e){e.preventDefault();const n=P.value.trim();if(!n){d("Please enter a search query.");return}n!==u&&(T(),s=1),u=n;try{l(!0);const{hits:o,totalHits:i}=await y(n,s,f);if(!o||o.length===0){d("No images found for your query. Try again!");return}s===1&&H(`Found ${i} images!`),m(o),N(i)}catch(o){h(o.message||"Something went wrong. Please try again later.")}finally{l(!1)}}function T(){g.innerHTML="",x()}function l(e){I.style.display=e?"block":"none"}function d(e){p.warning({title:"Warning",message:e,position:"topRight"})}function H(e){p.success({title:"Success",message:e,position:"topRight"})}function h(e){p.error({title:"Error",message:e,position:"topRight"})}function N(e){a&&a.disconnect();const n=R();a=new IntersectionObserver(async o=>{if(o[0].isIntersecting){if(s*f>=e){d("You have reached the end of the results."),a.disconnect();return}s++,l(!0);try{const{hits:i}=await y(u,s,f);m(i)}catch{h("Error loading more images.")}finally{l(!1)}}},{threshold:1}),a.observe(n)}function R(){let e=document.querySelector(".sentinel");return e||(e=document.createElement("div"),e.classList.add("sentinel"),g.after(e)),e}function x(){const e=document.querySelector(".sentinel");e&&e.remove()}
//# sourceMappingURL=index.js.map
