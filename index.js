import{S,i as d}from"./assets/vendor-DUWRWV1p.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const o of e)if(o.type==="childList")for(const c of o.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function n(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerPolicy&&(o.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?o.credentials="include":e.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(e){if(e.ep)return;e.ep=!0;const o=n(e);fetch(e.href,o)}})();function p(r){const t=document.querySelector(".gallery");if(!t){console.error("Gallery element not found.");return}if(!r||r.length===0){t.innerHTML='<p class="no-results">No images to display.</p>';return}const n=r.map(({webformatURL:e,largeImageURL:o,tags:c,likes:h,views:m,comments:b,downloads:w})=>`
        <div class="photo-card">
          <a href="${o}" class="gallery-link">
            <img src="${e}" alt="${c}" loading="lazy" class="gallery-image" />
          </a>
          <div class="info">
            <p><b>Likes:</b> ${h}</p>
            <p><b>Views:</b> ${m}</p>
            <p><b>Comments:</b> ${b}</p>
            <p><b>Downloads:</b> ${w}</p>
          </div>
        </div>
      `).join("");t.innerHTML+=n,new S(".gallery a").refresh()}const v="47523471-f6b5bf2e20bc9d436dc6d8dc4",$="https://pixabay.com/api/";async function y(r,t=1,n=12){const s=`${$}?key=${v}&q=${encodeURIComponent(r)}&image_type=photo&orientation=horizontal&safesearch=true&page=${t}&per_page=${n}`;try{const e=await fetch(s);if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);const o=await e.json();if(!o.hits||!o.totalHits)throw new Error("Invalid response format from API.");return o}catch(e){throw console.error("Error fetching images:",e),e}}const L=document.querySelector("#search-form"),q=document.querySelector('input[name="searchQuery"]'),P=document.querySelector(".gallery"),E=document.querySelector(".loader");let i=1,l="";const u=12;L.addEventListener("submit",I);async function I(r){r.preventDefault();const t=q.value.trim();if(!t){f("Please enter a search query.");return}t!==l&&(O(),i=1),l=t;try{a(!0);const{hits:n,totalHits:s}=await y(t,i,u);if(!n||n.length===0){f("No images found for your query. Try again!");return}i===1&&T(`Found ${s} images!`),p(n),H(s)}catch(n){g(n.message||"Something went wrong. Please try again later.")}finally{a(!1)}}function O(){P.innerHTML=""}function a(r){E.style.display=r?"block":"none"}function f(r){d.warning({title:"Warning",message:r,position:"topRight"})}function T(r){d.success({title:"Success",message:r,position:"topRight"})}function g(r){d.error({title:"Error",message:r,position:"topRight"})}function H(r){const t=new IntersectionObserver(async s=>{if(s[0].isIntersecting){if(i*u>=r){f("You have reached the end of the results."),t.disconnect();return}i++,a(!0);try{const{hits:e}=await y(l,i,u);p(e)}catch{g("Error loading more images.")}finally{a(!1)}}},{threshold:1}),n=document.querySelector(".sentinel");n&&t.observe(n)}
//# sourceMappingURL=index.js.map
